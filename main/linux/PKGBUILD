# Maintainer: Chris Cromer <cromer@cromnix.org>

pkgbase=linux				# Build stock -cromnix kernel
#pkgbase=linux-custom		# Build kernel with a different name
pkgname=("${pkgbase}" "${pkgbase}-headers" "${pkgbase}-docs" "${pkgbase}-mkinitcpio")
pkgver=4.9.56
pkgrel=1
arch=('x86_64')
url='http://www.kernel.org/'
license=('GPL2')
makedepends=('xmlto' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v4.x/linux-${pkgver}.tar.xz"
		'config'
		'linux-lib-path.patch'
		'linux.hook'
		'linux.preset')
md5sums=('2c2ebcac5d85599f73a33b4875aeb463'
         'd3c3f7c028b5dd6960dc0deeca7508e1'
         '9d34da065c7c15ab5aa73fa4b44f4c21'
         'ad4478b12635105c577947fec8224e98'
         'b5bb1760938dae90c23e53bef1d629d5')

_kernelname=${pkgbase#linux}
if [ "${_kernelname}" == "" ]; then
	_kernelname='-cromnix'
fi

prepare() {
	cd "$srcdir/linux-$pkgver"
	#make mrproper

	cp -v ${srcdir}/config .config

	if [ "${_kernelname}" != "" ]; then
		sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" .config
		sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" .config
	fi

	patch -Np1 -i ${srcdir}/linux-lib-path.patch
	sed -i '2iexit 0' scripts/depmod.sh
	sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile
	sed -e "s|@VERSION@|${pkgver}-${pkgrel}|g" \
		-e "s|@PKGBASE@|${pkgbase}|g" \
		-e "s|@KERNAME@|${_kernelname}|g" \
		-i "${srcdir}"/linux.hook "${srcdir}"/linux.preset
	
	#make prepare

	# Configure the kernel. Replace the line below with one of your choice.
	#make menuconfig # CLI menu for configuration
	#make nconfig # new CLI menu for configuration
	#make xconfig # X-based configuration
	#make oldconfig # using old config from previous kernel version
	# ... or manually edit .config
	
	yes "" | make config >/dev/null
}

build() {
	cd "$srcdir/linux-$pkgver"
	make LOCALVERSION= bzImage modules
}

_package() {
	pkgdesc="This package contains the ${pkgbase} kernel"
	depends=('linux-common' 'initramfs')
	optdepends=("${pkgbase}-doc: linux documentation")

	cd "$srcdir/linux-$pkgver"

	_kernelversion=$(make LOCALVERSION= kernelrelease)
	_basekernel=${_kernelversion%%-*}
	_basekernel=${_basekernel%.*}
	install=linux.install

	sed -e "s|@KERNAME@|${_kernelname}|g" \
		"${startdir}"/linux.install > "${startdir}"/${pkgbase}.install.pkg
	true && install=${pkgbase}.install.pkg

	ln -sv ${pkgdir}/usr/lib ${pkgdir}/lib

	make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install

	mkdir -pv ${pkgdir}/boot
	cp -v arch/x86/boot/bzImage ${pkgdir}/boot/vmlinuz-${pkgver}-${pkgrel}${_kernelname}
	cp -v System.map ${pkgdir}/boot/System.map-${pkgver}-${pkgrel}${_kernelname}
	cp -v .config ${pkgdir}/boot/config-${pkgver}-${pkgrel}${_kernelname}

	install -vd -m755 ${pkgdir}/etc/modprobe.d

	rm -rf "${pkgdir}"/usr/lib/firmware
	rm -rf "${pkgdir}"/usr/lib/modules/${_kernelversion}/{build,source}

	ln -s "../extramodules-${_basekernel}${_kernelname}" "${pkgdir}/lib/modules/${_kernelversion}/extramodules"
	echo "${_kernelversion}" |
		install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/extramodules-${_basekernel}${_kernelname}/version"

	cd ${pkgdir}/boot

	depmod -b "${pkgdir}" -F "${pkgdir}/boot/System.map-${pkgver}-${pkgrel}${_kernelname}" "${_kernelversion}"

	rm -v ${pkgdir}/lib
}

_package-headers() {
	pkgdesc="Header files and scripts for building modules for the ${pkgbase} kernel"

	cd "$srcdir/linux-$pkgver"
	local _builddir="${pkgdir}/usr/lib/modules/${_kernelversion}/build"

	install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
	install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

	mkdir "${_builddir}/.tmp_versions"

	cp -t "${_builddir}" -a include scripts

	install -Dt "${_builddir}/arch/x86" -m644 arch/x86/Makefile
	install -Dt "${_builddir}/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

	cp -t "${_builddir}/arch/x86" -a arch/x86/include

	install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
	install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

	# http://bugs.archlinux.org/task/9912
	install -Dt "${_builddir}/drivers/media/dvb-core" -m644 drivers/media/dvb-core/*.h

	# http://bugs.archlinux.org/task/13146
	install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/lgdt330x.h
	install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	# http://bugs.archlinux.org/task/20402
	install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	# add xfs and shmem for aufs building
	mkdir -p "${_builddir}"/{fs/xfs,mm}

	# copy in Kconfig files
	find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

	# add objtool for external module building and enabled VALIDATION_STACK option
	if [[ -e tools/objtool/objtool ]]; then
		install -Dt "${_builddir}/tools/objtool" tools/objtool/objtool
	fi

	# remove unneeded architectures
	local _arch
	for _arch in "${_builddir}"/arch/*/; do
		if [[ ${_arch} != */x86/ ]]; then
			rm -r "${_arch}"
		fi
	done

	# remove files already in linux-docs package
	rm -r "${_builddir}/Documentation"

	# Fix permissions
	chmod -R u=rwX,go=rX "${_builddir}"

	# strip scripts directory
	local _binary _strip
	while read -rd '' _binary; do
		case "$(file -bi "${_binary}")" in
			*application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
			*application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
			*application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
			*) continue ;;
		esac
		/usr/bin/strip ${_strip} "${_binary}"
	done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}

_package-docs() {
	pkgdesc="Documentation for the ${pkgbase} kernel"
	arch=('any')

	cd "$srcdir/linux-$pkgver"

	mkdir -pv ${pkgdir}/usr/share/doc/${pkgbase}-${pkgver}
	cp -r Documentation/* ${pkgdir}/usr/share/doc/${pkgbase}-${pkgver}
}

_package-mkinitcpio() {
	arch=('any')
	depends=('mkinitcpio')
	backup=("etc/mkinitcpio.d/${pkgbase}.preset")
	pkgdesc="This package contains a hook and preset for the ${pkgbase} kernel to use with mkinitcpio"
	install=linux-mkinitcpio.install

	sed -e "s|@KERNAME@|${_kernelname}|g" \
		"${startdir}"/linux-mkinitcpio.install > "${startdir}"/${pkgbase}-mkinitcpio.install.pkg
	true && install=${pkgbase}-mkinitcpio.install.pkg

	install -Dm644 "${srcdir}"/linux.preset "${pkgdir}"/etc/mkinitcpio.d/${pkgbase}.preset
	install -Dm644 "${srcdir}"/linux.hook "${pkgdir}"/usr/share/libalpm/hooks/60-${pkgbase}.hook
}

for _p in ${pkgname[@]}; do
	eval "package_${_p}() {
		$(declare -f "_package${_p#${pkgbase}}")
		_package${_p#${pkgbase}}
	}"
done
