# Maintainer: Chris Cromer <cromer@cromnix.org>

pkgbase=linux-stable
pkgname=('linux-stable' 'linux-stable-headers' 'linux-stable-doc' 'linux-stable-mkinitcpio')
pkgver=4.13.4
pkgrel=1
pkgdesc="This package contains the stable linux kernel, support for this kernel is not guaranteed and may end up EOL(End of Life)"
arch=('x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'kmod' 'inetutils' 'bc')
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v4.x/linux-$pkgver.tar.xz"
        "config"
        "linux-lib-path.patch"
        'linux.hook'
        'linux.preset')
md5sums=('907447893b977c791934960a73b7fa00'
         '180393e5924fad11abdc1d1a67b06074'
         '9d34da065c7c15ab5aa73fa4b44f4c21'
         '43bb146912bfc5e6f8fbf6705d6b9d46'
         'b4c4d9a9b8e7aa03931d7e9cf31f1191')

prepare() {
    cd "$srcdir/linux-$pkgver"
    make mrproper

    cp -v ${srcdir}/config .config
    #make olddefconfig
	#make menuconfig
    patch -Np1 -i ${srcdir}/linux-lib-path.patch

    sed -i '2iexit 0' scripts/depmod.sh

	sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile
	
	sed -e "s|@VERSION@|${pkgver}-${pkgrel}|g" -i "${srcdir}"/linux.hook "${srcdir}"/linux.preset
}

build() {
    cd "$srcdir/linux-$pkgver"
    make LOCALVERSION= bzImage modules
}

package_linux-stable() {
	depends=('linux-common' 'initramfs')
	optdepends=('linux-stable-doc: linux documentation')

    cd "$srcdir/linux-$pkgver"

	_kernelversion=$(make LOCALVERSION= kernelrelease)
	_basekernel=${_kernelversion%%-*}
	_basekernel=${_basekernel%.*}
	install=linux-stable.install

	mkdir -pv ${pkgdir}/usr/lib
    ln -sv ${pkgdir}/usr/lib ${pkgdir}/lib

    make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install

    mkdir -pv ${pkgdir}/boot
    cp -v arch/x86/boot/bzImage ${pkgdir}/boot/vmlinuz-${pkgver}-${pkgrel}-cromnix-stable
    cp -v System.map ${pkgdir}/boot/System.map-${pkgver}-${pkgrel}-cromnix-stable
    cp -v .config ${pkgdir}/boot/config-${pkgver}-${pkgrel}-cromnix-stable

    install -vd -m755 ${pkgdir}/etc/modprobe.d

	rm -rf "${pkgdir}"/usr/lib/firmware
	rm -rf "${pkgdir}"/usr/lib/modules/${_kernelversion}/{build,source}
	
	ln -s "../extramodules-${_basekernel}-cromnix-stable" "${pkgdir}/lib/modules/${_kernelversion}/extramodules"
	echo "${_kernelversion}" |
		install -Dm644 /dev/stdin "${pkgdir}/usr/lib/modules/extramodules-${_basekernel}-cromnix-stable/version"

    cd ${pkgdir}/boot

    depmod -b "${pkgdir}" -F "${pkgdir}/boot/System.map-${pkgver}-${pkgrel}-cromnix-stable" "${_kernelversion}"

    rm -v ${pkgdir}/lib
}

package_linux-stable-headers() {
	pkgdesc="Header files and scripts for building modules for the stable line kernel"

	cd "$srcdir/linux-$pkgver"
	local _builddir="${pkgdir}/usr/lib/modules/${_kernelversion}/build"

	install -Dt "${_builddir}" -m644 Makefile .config Module.symvers
	install -Dt "${_builddir}/kernel" -m644 kernel/Makefile

	mkdir "${_builddir}/.tmp_versions"

	cp -t "${_builddir}" -a include scripts

	install -Dt "${_builddir}/arch/x86" -m644 arch/x86/Makefile
	install -Dt "${_builddir}/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

	cp -t "${_builddir}/arch/x86" -a arch/x86/include

	install -Dt "${_builddir}/drivers/md" -m644 drivers/md/*.h
	install -Dt "${_builddir}/net/mac80211" -m644 net/mac80211/*.h

	# http://bugs.archlinux.org/task/9912
	install -Dt "${_builddir}/drivers/media/dvb-core" -m644 drivers/media/dvb-core/*.h

	# http://bugs.archlinux.org/task/13146
	install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/lgdt330x.h
	install -Dt "${_builddir}/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

	# http://bugs.archlinux.org/task/20402
	install -Dt "${_builddir}/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
	install -Dt "${_builddir}/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
	install -Dt "${_builddir}/drivers/media/tuners" -m644 drivers/media/tuners/*.h

	# add xfs and shmem for aufs building
	mkdir -p "${_builddir}"/{fs/xfs,mm}

	# copy in Kconfig files
	find . -name Kconfig\* -exec install -Dm644 {} "${_builddir}/{}" \;

	# add objtool for external module building and enabled VALIDATION_STACK option
	if [[ -e tools/objtool/objtool ]]; then
		install -Dt "${_builddir}/tools/objtool" tools/objtool/objtool
	fi

	# remove unneeded architectures
	local _arch
	for _arch in "${_builddir}"/arch/*/; do
		if [[ ${_arch} != */x86/ ]]; then
			rm -r "${_arch}"
		fi
	done

	# remove files already in linux-docs package
	rm -r "${_builddir}/Documentation"

	# Fix permissions
	chmod -R u=rwX,go=rX "${_builddir}"

	# strip scripts directory
	local _binary _strip
	while read -rd '' _binary; do
		case "$(file -bi "${_binary}")" in
			*application/x-sharedlib*)  _strip="${STRIP_SHARED}"   ;; # Libraries (.so)
			*application/x-archive*)    _strip="${STRIP_STATIC}"   ;; # Libraries (.a)
			*application/x-executable*) _strip="${STRIP_BINARIES}" ;; # Binaries
			*) continue ;;
		esac
		/usr/bin/strip ${_strip} "${_binary}"
	done < <(find "${_builddir}/scripts" -type f -perm -u+w -print0 2>/dev/null)
}

package_linux-stable-doc() {
	arch=('any')

    cd "$srcdir/linux-$pkgver"

	mkdir -pv ${pkgdir}/usr/share/doc/${pkgbase}-${pkgver}
    cp -r Documentation/* ${pkgdir}/usr/share/doc/${pkgbase}-${pkgver}
}

package_linux-stable-mkinitcpio() {
	arch=('any')
	depends=('mkinitcpio')
	backup=('etc/mkinitcpio.d/linux-stable.preset')
	pkgdesc='This package contains a hook and preset for mkinitcpio'
	install=linux-stable-mkinitcpio.install

	install -Dm644 "${srcdir}"/linux.preset "${pkgdir}"/etc/mkinitcpio.d/linux-stable.preset
	install -Dm644 "${srcdir}"/linux.hook "${pkgdir}"/usr/share/libalpm/hooks/60-linux-stable.hook
}
